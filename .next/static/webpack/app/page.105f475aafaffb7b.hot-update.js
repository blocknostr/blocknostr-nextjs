"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/nostr/RelayManager.tsx":
/*!****************************************!*\
  !*** ./src/lib/nostr/RelayManager.tsx ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/../node_modules/nostr-tools/lib/esm/index.js\");\n\nclass RelayManager {\n    // Subscribe to relay status changes\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>this.listeners.delete(listener);\n    }\n    notify() {\n        this.listeners.forEach((fn)=>fn());\n    }\n    persist() {\n        if (true) {\n            localStorage.setItem(\"nostr-relay-status\", JSON.stringify(Array.from(this.relays.values())));\n        }\n    }\n    getAllRelays() {\n        return Array.from(this.relays.values());\n    }\n    getHealthyRelays() {\n        let min = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n        const healthy = Array.from(this.relays.values()).filter((r)=>r.healthy);\n        if (healthy.length < min) {\n            // Fallback: include some recently failed relays\n            const fallback = Array.from(this.relays.values()).filter((r)=>!r.healthy && Date.now() - r.lastChecked > this.retryDelay).slice(0, min - healthy.length);\n            return healthy.concat(fallback);\n        }\n        return healthy;\n    }\n    markRelay(url, healthy) {\n        const r = this.relays.get(url);\n        if (r) {\n            r.healthy = healthy;\n            r.lastChecked = Date.now();\n            r.failCount = healthy ? 0 : r.failCount + 1;\n            if (r.failCount >= this.maxFail) r.healthy = false;\n            this.persist();\n            this.notify();\n        }\n    }\n    async checkRelay(url) {\n        // Simple check: try to connect and fetch a dummy event\n        const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_0__.SimplePool();\n        try {\n            await pool.querySync([\n                url\n            ], {\n                limit: 1\n            });\n            this.markRelay(url, true);\n            return true;\n        } catch (e) {\n            this.markRelay(url, false);\n            return false;\n        } finally{\n            pool.close([\n                url\n            ]);\n        }\n    }\n    async checkAllRelays() {\n        await Promise.all(Array.from(this.relays.keys()).map((url)=>this.checkRelay(url)));\n    }\n    // Fetch with retry/aggregation\n    async fetchWithRetry(filter) {\n        let minRelays = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, maxAttempts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n        let relays = this.getHealthyRelays(minRelays).map((r)=>r.url);\n        let results = [];\n        let tried = new Set();\n        let attempts = 0;\n        while(results.length === 0 && attempts < maxAttempts && relays.length > 0){\n            const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_0__.SimplePool();\n            try {\n                const res = await pool.querySync(relays, filter);\n                results = res || [];\n                // Mark all as healthy\n                relays.forEach((url)=>this.markRelay(url, true));\n            } catch (e) {\n                // Mark all as failed\n                relays.forEach((url)=>this.markRelay(url, false));\n            } finally{\n                pool.close(relays);\n            }\n            // Prepare next attempt\n            relays.forEach((url)=>tried.add(url));\n            relays = this.getAllRelays().filter((r)=>!tried.has(r.url) && r.healthy).map((r)=>r.url);\n            attempts++;\n        }\n        return results;\n    }\n    // Add/remove relays (for power users)\n    addRelay(url) {\n        if (!this.relays.has(url)) {\n            this.relays.set(url, {\n                url,\n                healthy: true,\n                lastChecked: 0,\n                failCount: 0\n            });\n            this.persist();\n            this.notify();\n        }\n    }\n    removeRelay(url) {\n        if (this.relays.has(url)) {\n            this.relays.delete(url);\n            this.persist();\n            this.notify();\n        }\n    }\n    constructor(initialRelays = []){\n        this.relays = new Map();\n        this.listeners = new Set();\n        this.maxFail = 3;\n        this.retryDelay = 60 * 1000 // 1 min\n        ;\n        // Load from localStorage or use initial\n        const saved =  true ? localStorage.getItem(\"nostr-relay-status\") : 0;\n        if (saved) {\n            try {\n                const arr = JSON.parse(saved);\n                arr.forEach((r)=>this.relays.set(r.url, r));\n            } catch (e) {}\n        }\n        initialRelays.forEach((url)=>{\n            if (!this.relays.has(url)) {\n                this.relays.set(url, {\n                    url,\n                    healthy: true,\n                    lastChecked: 0,\n                    failCount: 0\n                });\n            }\n        });\n    }\n}\n// Singleton instance with default relays\nconst DEFAULT_RELAYS = [\n    \"wss://relay.damus.io\",\n    \"wss://relay.nostr.band\",\n    \"wss://nostr.wine\",\n    \"wss://nostr-pub.wellorder.net\",\n    \"wss://nostr.oxtr.dev\",\n    \"wss://nostr.mom\"\n];\nconst relayManager = new RelayManager(DEFAULT_RELAYS);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (relayManager);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nostr/RelayManager.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/nostr/relay.ts":
/*!********************************!*\
  !*** ./src/lib/nostr/relay.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addUserRelay: () => (/* binding */ addUserRelay),\n/* harmony export */   checkAllRelays: () => (/* binding */ checkAllRelays),\n/* harmony export */   clearBadRelayCache: () => (/* binding */ clearBadRelayCache),\n/* harmony export */   fetchNostrFeed: () => (/* binding */ fetchNostrFeed),\n/* harmony export */   fetchNostrProfile: () => (/* binding */ fetchNostrProfile),\n/* harmony export */   getAllRelays: () => (/* binding */ getAllRelays),\n/* harmony export */   getHealthyRelays: () => (/* binding */ getHealthyRelays),\n/* harmony export */   removeUserRelay: () => (/* binding */ removeUserRelay)\n/* harmony export */ });\n/* harmony import */ var _RelayManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RelayManager */ \"(app-pages-browser)/./src/lib/nostr/RelayManager.tsx\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nostr-tools */ \"(app-pages-browser)/../node_modules/nostr-tools/lib/esm/index.js\");\n// nostr-relay.ts\n// Simple NOSTR relay fetcher using nostr-tools\n\n\n// --- RELAY MANAGEMENT (delegated to RelayManager) ---\nfunction addUserRelay(url) {\n    _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addRelay(url);\n}\nfunction removeUserRelay(url) {\n    _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeRelay(url);\n}\nfunction getAllRelays() {\n    return _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllRelays().map((r)=>r.url);\n}\n// --- FEED FETCHING ---\nasync function fetchNostrFeed(relayUrls) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // Use provided relays or healthy relays from manager\n    const relays = relayUrls && relayUrls.length ? relayUrls : _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getHealthyRelays().map((r)=>r.url);\n    const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_1__.SimplePool();\n    const filter = {\n        kinds: [\n            1\n        ],\n        limit: options.limit || 20,\n        ...options.until ? {\n            until: options.until\n        } : {}\n    };\n    try {\n        const events = await pool.querySync(relays, filter);\n        return events.sort((a, b)=>b.created_at - a.created_at);\n    } finally{\n        pool.close(relays);\n    }\n}\n// --- PROFILE FETCHING ---\nasync function fetchNostrProfile(relayUrls, pubkey) {\n    const relays = relayUrls && relayUrls.length ? relayUrls : _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getHealthyRelays().map((r)=>r.url);\n    const pool = new nostr_tools__WEBPACK_IMPORTED_MODULE_1__.SimplePool();\n    const filter = {\n        kinds: [\n            0\n        ],\n        authors: [\n            pubkey\n        ],\n        limit: 1\n    };\n    try {\n        const events = await pool.querySync(relays, filter);\n        if (events.length > 0) {\n            try {\n                return JSON.parse(events[0].content);\n            } catch (err) {\n                console.warn(\"Failed to parse profile content for \".concat(pubkey, \":\"), err);\n                return null;\n            }\n        }\n        return null;\n    } finally{\n        pool.close(relays);\n    }\n}\n// --- RELAY HEALTH ---\nasync function getHealthyRelays() {\n    const healthy = _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getHealthyRelays();\n    const all = _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllRelays();\n    return {\n        healthyRelays: healthy.map((r)=>r.url),\n        healthyCount: healthy.length,\n        totalCount: all.length\n    };\n}\nasync function checkAllRelays() {\n    await _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checkAllRelays();\n}\nfunction clearBadRelayCache() {\n    // For compatibility, just re-check all relays and mark all as healthy\n    _RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAllRelays().forEach((r)=>_RelayManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].markRelay(r.url, true));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbm9zdHIvcmVsYXkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLGlCQUFpQjtBQUNqQiwrQ0FBK0M7QUFDTDtBQUN3QjtBQU9sRSx1REFBdUQ7QUFDaEQsU0FBU0UsYUFBYUMsR0FBVztJQUN0Q0gscURBQVlBLENBQUNJLFFBQVEsQ0FBQ0Q7QUFDeEI7QUFDTyxTQUFTRSxnQkFBZ0JGLEdBQVc7SUFDekNILHFEQUFZQSxDQUFDTSxXQUFXLENBQUNIO0FBQzNCO0FBQ08sU0FBU0k7SUFDZCxPQUFPUCxxREFBWUEsQ0FBQ08sWUFBWSxHQUFHQyxHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVOLEdBQUc7QUFDbkQ7QUFFQSx3QkFBd0I7QUFDakIsZUFBZU8sZUFBZUMsU0FBb0I7UUFBRUMsVUFBQUEsaUVBQXVCLENBQUM7SUFDakYscURBQXFEO0lBQ3JELE1BQU1DLFNBQVNGLGFBQWFBLFVBQVVHLE1BQU0sR0FBR0gsWUFBWVgscURBQVlBLENBQUNlLGdCQUFnQixHQUFHUCxHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVOLEdBQUc7SUFDekcsTUFBTWEsT0FBTyxJQUFJZixtREFBVUE7SUFDM0IsTUFBTWdCLFNBQWlCO1FBQ3JCQyxPQUFPO1lBQUM7U0FBRTtRQUNWQyxPQUFPUCxRQUFRTyxLQUFLLElBQUk7UUFDeEIsR0FBSVAsUUFBUVEsS0FBSyxHQUFHO1lBQUVBLE9BQU9SLFFBQVFRLEtBQUs7UUFBQyxJQUFJLENBQUMsQ0FBQztJQUNuRDtJQUNBLElBQUk7UUFDRixNQUFNQyxTQUFTLE1BQU1MLEtBQUtNLFNBQVMsQ0FBQ1QsUUFBUUk7UUFDNUMsT0FBT0ksT0FBT0UsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1BLEVBQUVDLFVBQVUsR0FBR0YsRUFBRUUsVUFBVTtJQUMxRCxTQUFVO1FBQ1JWLEtBQUtXLEtBQUssQ0FBQ2Q7SUFDYjtBQUNGO0FBRUEsMkJBQTJCO0FBQ3BCLGVBQWVlLGtCQUFrQmpCLFNBQW1CLEVBQUVrQixNQUFjO0lBQ3pFLE1BQU1oQixTQUFTRixhQUFhQSxVQUFVRyxNQUFNLEdBQUdILFlBQVlYLHFEQUFZQSxDQUFDZSxnQkFBZ0IsR0FBR1AsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFTixHQUFHO0lBQ3pHLE1BQU1hLE9BQU8sSUFBSWYsbURBQVVBO0lBQzNCLE1BQU1nQixTQUFpQjtRQUNyQkMsT0FBTztZQUFDO1NBQUU7UUFDVlksU0FBUztZQUFDRDtTQUFPO1FBQ2pCVixPQUFPO0lBQ1Q7SUFDQSxJQUFJO1FBQ0YsTUFBTUUsU0FBUyxNQUFNTCxLQUFLTSxTQUFTLENBQUNULFFBQVFJO1FBQzVDLElBQUlJLE9BQU9QLE1BQU0sR0FBRyxHQUFHO1lBQ3JCLElBQUk7Z0JBQ0YsT0FBT2lCLEtBQUtDLEtBQUssQ0FBQ1gsTUFBTSxDQUFDLEVBQUUsQ0FBQ1ksT0FBTztZQUNyQyxFQUFFLE9BQU9DLEtBQUs7Z0JBQ1pDLFFBQVFDLElBQUksQ0FBQyx1Q0FBOEMsT0FBUFAsUUFBTyxNQUFJSztnQkFDL0QsT0FBTztZQUNUO1FBQ0Y7UUFDQSxPQUFPO0lBQ1QsU0FBVTtRQUNSbEIsS0FBS1csS0FBSyxDQUFDZDtJQUNiO0FBQ0Y7QUFFQSx1QkFBdUI7QUFDaEIsZUFBZUU7SUFDcEIsTUFBTXNCLFVBQVVyQyxxREFBWUEsQ0FBQ2UsZ0JBQWdCO0lBQzdDLE1BQU11QixNQUFNdEMscURBQVlBLENBQUNPLFlBQVk7SUFDckMsT0FBTztRQUNMZ0MsZUFBZUYsUUFBUTdCLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRU4sR0FBRztRQUNyQ3FDLGNBQWNILFFBQVF2QixNQUFNO1FBQzVCMkIsWUFBWUgsSUFBSXhCLE1BQU07SUFDeEI7QUFDRjtBQUVPLGVBQWU0QjtJQUNwQixNQUFNMUMscURBQVlBLENBQUMwQyxjQUFjO0FBQ25DO0FBRU8sU0FBU0M7SUFDZCxzRUFBc0U7SUFDdEUzQyxxREFBWUEsQ0FBQ08sWUFBWSxHQUFHcUMsT0FBTyxDQUFDbkMsQ0FBQUEsSUFBS1QscURBQVlBLENBQUM2QyxTQUFTLENBQUNwQyxFQUFFTixHQUFHLEVBQUU7QUFDekUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zY2FybmVzL3dvcmtzcGFjZS9zcmMvbGliL25vc3RyL3JlbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG5vc3RyLXJlbGF5LnRzXG4vLyBTaW1wbGUgTk9TVFIgcmVsYXkgZmV0Y2hlciB1c2luZyBub3N0ci10b29sc1xuaW1wb3J0IHJlbGF5TWFuYWdlciBmcm9tIFwiLi9SZWxheU1hbmFnZXJcIjtcbmltcG9ydCB7IFNpbXBsZVBvb2wsIHR5cGUgRXZlbnQsIHR5cGUgRmlsdGVyIH0gZnJvbSBcIm5vc3RyLXRvb2xzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVlZE9wdGlvbnMge1xuICBsaW1pdD86IG51bWJlcjtcbiAgdW50aWw/OiBudW1iZXI7XG59XG5cbi8vIC0tLSBSRUxBWSBNQU5BR0VNRU5UIChkZWxlZ2F0ZWQgdG8gUmVsYXlNYW5hZ2VyKSAtLS1cbmV4cG9ydCBmdW5jdGlvbiBhZGRVc2VyUmVsYXkodXJsOiBzdHJpbmcpIHtcbiAgcmVsYXlNYW5hZ2VyLmFkZFJlbGF5KHVybCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVXNlclJlbGF5KHVybDogc3RyaW5nKSB7XG4gIHJlbGF5TWFuYWdlci5yZW1vdmVSZWxheSh1cmwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbFJlbGF5cygpOiBzdHJpbmdbXSB7XG4gIHJldHVybiByZWxheU1hbmFnZXIuZ2V0QWxsUmVsYXlzKCkubWFwKHIgPT4gci51cmwpO1xufVxuXG4vLyAtLS0gRkVFRCBGRVRDSElORyAtLS1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaE5vc3RyRmVlZChyZWxheVVybHM/OiBzdHJpbmdbXSwgb3B0aW9uczogRmVlZE9wdGlvbnMgPSB7fSk6IFByb21pc2U8RXZlbnRbXT4ge1xuICAvLyBVc2UgcHJvdmlkZWQgcmVsYXlzIG9yIGhlYWx0aHkgcmVsYXlzIGZyb20gbWFuYWdlclxuICBjb25zdCByZWxheXMgPSByZWxheVVybHMgJiYgcmVsYXlVcmxzLmxlbmd0aCA/IHJlbGF5VXJscyA6IHJlbGF5TWFuYWdlci5nZXRIZWFsdGh5UmVsYXlzKCkubWFwKHIgPT4gci51cmwpO1xuICBjb25zdCBwb29sID0gbmV3IFNpbXBsZVBvb2woKTtcbiAgY29uc3QgZmlsdGVyOiBGaWx0ZXIgPSB7XG4gICAga2luZHM6IFsxXSxcbiAgICBsaW1pdDogb3B0aW9ucy5saW1pdCB8fCAyMCxcbiAgICAuLi4ob3B0aW9ucy51bnRpbCA/IHsgdW50aWw6IG9wdGlvbnMudW50aWwgfSA6IHt9KSxcbiAgfTtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBwb29sLnF1ZXJ5U3luYyhyZWxheXMsIGZpbHRlcik7XG4gICAgcmV0dXJuIGV2ZW50cy5zb3J0KChhLCBiKSA9PiBiLmNyZWF0ZWRfYXQgLSBhLmNyZWF0ZWRfYXQpO1xuICB9IGZpbmFsbHkge1xuICAgIHBvb2wuY2xvc2UocmVsYXlzKTtcbiAgfVxufVxuXG4vLyAtLS0gUFJPRklMRSBGRVRDSElORyAtLS1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaE5vc3RyUHJvZmlsZShyZWxheVVybHM6IHN0cmluZ1tdLCBwdWJrZXk6IHN0cmluZykge1xuICBjb25zdCByZWxheXMgPSByZWxheVVybHMgJiYgcmVsYXlVcmxzLmxlbmd0aCA/IHJlbGF5VXJscyA6IHJlbGF5TWFuYWdlci5nZXRIZWFsdGh5UmVsYXlzKCkubWFwKHIgPT4gci51cmwpO1xuICBjb25zdCBwb29sID0gbmV3IFNpbXBsZVBvb2woKTtcbiAgY29uc3QgZmlsdGVyOiBGaWx0ZXIgPSB7XG4gICAga2luZHM6IFswXSxcbiAgICBhdXRob3JzOiBbcHVia2V5XSxcbiAgICBsaW1pdDogMSxcbiAgfTtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBwb29sLnF1ZXJ5U3luYyhyZWxheXMsIGZpbHRlcik7XG4gICAgaWYgKGV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShldmVudHNbMF0uY29udGVudCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gcGFyc2UgcHJvZmlsZSBjb250ZW50IGZvciAke3B1YmtleX06YCwgZXJyKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9IGZpbmFsbHkge1xuICAgIHBvb2wuY2xvc2UocmVsYXlzKTtcbiAgfVxufVxuXG4vLyAtLS0gUkVMQVkgSEVBTFRIIC0tLVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEhlYWx0aHlSZWxheXMoKTogUHJvbWlzZTx7IGhlYWx0aHlSZWxheXM6IHN0cmluZ1tdOyBoZWFsdGh5Q291bnQ6IG51bWJlcjsgdG90YWxDb3VudDogbnVtYmVyIH0+IHtcbiAgY29uc3QgaGVhbHRoeSA9IHJlbGF5TWFuYWdlci5nZXRIZWFsdGh5UmVsYXlzKCk7XG4gIGNvbnN0IGFsbCA9IHJlbGF5TWFuYWdlci5nZXRBbGxSZWxheXMoKTtcbiAgcmV0dXJuIHtcbiAgICBoZWFsdGh5UmVsYXlzOiBoZWFsdGh5Lm1hcChyID0+IHIudXJsKSxcbiAgICBoZWFsdGh5Q291bnQ6IGhlYWx0aHkubGVuZ3RoLFxuICAgIHRvdGFsQ291bnQ6IGFsbC5sZW5ndGgsXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0FsbFJlbGF5cygpIHtcbiAgYXdhaXQgcmVsYXlNYW5hZ2VyLmNoZWNrQWxsUmVsYXlzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckJhZFJlbGF5Q2FjaGUoKSB7XG4gIC8vIEZvciBjb21wYXRpYmlsaXR5LCBqdXN0IHJlLWNoZWNrIGFsbCByZWxheXMgYW5kIG1hcmsgYWxsIGFzIGhlYWx0aHlcbiAgcmVsYXlNYW5hZ2VyLmdldEFsbFJlbGF5cygpLmZvckVhY2gociA9PiByZWxheU1hbmFnZXIubWFya1JlbGF5KHIudXJsLCB0cnVlKSk7XG59XG4iXSwibmFtZXMiOlsicmVsYXlNYW5hZ2VyIiwiU2ltcGxlUG9vbCIsImFkZFVzZXJSZWxheSIsInVybCIsImFkZFJlbGF5IiwicmVtb3ZlVXNlclJlbGF5IiwicmVtb3ZlUmVsYXkiLCJnZXRBbGxSZWxheXMiLCJtYXAiLCJyIiwiZmV0Y2hOb3N0ckZlZWQiLCJyZWxheVVybHMiLCJvcHRpb25zIiwicmVsYXlzIiwibGVuZ3RoIiwiZ2V0SGVhbHRoeVJlbGF5cyIsInBvb2wiLCJmaWx0ZXIiLCJraW5kcyIsImxpbWl0IiwidW50aWwiLCJldmVudHMiLCJxdWVyeVN5bmMiLCJzb3J0IiwiYSIsImIiLCJjcmVhdGVkX2F0IiwiY2xvc2UiLCJmZXRjaE5vc3RyUHJvZmlsZSIsInB1YmtleSIsImF1dGhvcnMiLCJKU09OIiwicGFyc2UiLCJjb250ZW50IiwiZXJyIiwiY29uc29sZSIsIndhcm4iLCJoZWFsdGh5IiwiYWxsIiwiaGVhbHRoeVJlbGF5cyIsImhlYWx0aHlDb3VudCIsInRvdGFsQ291bnQiLCJjaGVja0FsbFJlbGF5cyIsImNsZWFyQmFkUmVsYXlDYWNoZSIsImZvckVhY2giLCJtYXJrUmVsYXkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nostr/relay.ts\n"));

/***/ })

});